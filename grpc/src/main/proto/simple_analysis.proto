syntax = "proto3";

option java_package = "zemberek.proto.simple_analysis";
option java_multiple_files = true;

package zemberek.simple_analysis;

// Morphological analysis request for a single word.
message WordAnalysisRequest {
  string input = 1;
}

// A dictionary item. Lemma and pos values are provided.
// TODO: POS values should be enums.
message DictionaryItem_P {
  string lemma = 1;
  string primaryPos = 2;
  string secondaryPos = 3;
}

// represents a single morphological analysis result.
message SingleAnalysis_P {
  // Defines the POS of the whole word.
  string pos = 1;
  // root word's dictionary information (contains lemma and pos values.)
  DictionaryItem_P dictionaryItem = 2;
  // This is the long formatted analysis string.
  string analysis = 3;
  // [true] if this analysis contain informal morphemes.
  bool informal = 4;
  // [true] if this root form of the input does not exist in dictionary.
  bool runtime = 5;
  // all lemma values. Such as for input "kapattırdım" -> ["kapat","kapattır"]
  repeated string lemmas = 6;
  // all morpheme information.
  repeated MorphemeData_P morphemes =7;
}

// Contains surface form and id of the morpheme.
// Like surface = "acak", morpheme = Fut
message MorphemeData_P {
  string surface = 1;
  string morpheme = 2;
}

// Contains all analyses of a word.
message WordAnalysis_P {
  // input word.
  string input = 1;
  repeated SingleAnalysis_P analyses = 2;
}

// Sentence analysis request.
message SentenceAnalysisRequest {
  // sentence string
  string input = 1;
  // if [true], all analyses of all tokens will be included in the response
  // else, only the best analysis will be used.
  bool containAllAnalyses =2;
}

message SentenceAnalysis_P {
  // input sentence
  string input = 1;
  // for each token, result best morphological analysis and if requested, all
  // analyses.
  repeated SentenceWordAnalysis_P results = 2;
}

// After disambiguation, a SentenceWordAnalysis_P object per use is used.
message SentenceWordAnalysis_P {
  string token = 1;
  SingleAnalysis_P best = 2;
  WordAnalysis_P all = 3;
}

service SimpleAnalysisService {
  rpc AnalyzeSentence (SentenceAnalysisRequest) returns (SentenceAnalysis_P);
  rpc AnalyzeWord (WordAnalysisRequest) returns (WordAnalysis_P);
}
